












--> OK... ALÉM DE UNIT TESTING,

TAMBÉM TEMOS 

'INTEGRATION TESTING'


E 


'END-TO-END TESTING'...










-> TAMBÉM EXISTEM OUTROS TIPOS DE TEST,

COMO 'ACCESSIBILITY TESTING',


MAS ESSAS 

SÃO 

AS 

3 FORMAS 






DE 

TEST __ MAIS _ UTILIZADAS E EMPREGADAS 


EM WEBSITES...
















--> OK... MAS O CONCEITO DE 'AUTOMATED TESTING'


NÃO É EXCLUSIVO AO JS --> ELE EXISTE EM QUASE 

TODAS AS LINGUAGENS DE PROGRAMAÇÃO... -> E O QUE APRENDEREMOS AQUI 


VAI 


NOS 

AJUDAR
 
 COM QUASE 

 TODAS 

 AS 
 LINGUAGENS DE PROGRAMAÇÃO, BASICAMENTE...












UNIT TESTING --> APRENDEMOS QUE 




'''ESSE TIPO DE TEST __ TESTA __ OS INDIVIDUAL BUILDING BLOCKS DE 1 APP''...






--> E __ TODOS ESSES BUILDING BLOCKS SÃO TESTADOS DE FORMA STANDALONE.,..











-> A IDEIA É QUE ''SE OS BUILDING BLOCKS FUNCIONAM,

O APP INTEIRO FUNCIONA''''...













MAS COM O INTEGRATION TESTING,

NÓS 

FAZEMOS 'BUILD-UP'

DO 



UNIT TESTING,

PQ TESTAMOS __ A 'COMBINATION'



DE 
UNITS,




A COMBINATION DE BUILDING BLOCKS --> VERIFICAMOS 


QUE 


'SE 2 UNITS ESTÃO SENDO EXECUTADAS JUNTAS/FUNCIONANDO EM CONJUNTO,


O APP ESTÁ FUNCIONANDO'...
















--> ISSO PQ, APESAR DOS BUILDING BLOCKS FUNCIONAREM 'STANDALONE',

NADA GARANTE QUE,

ASSIM QUE 

OS COMBINARMOS,





FUNCIONEM 'COMO NÓS ESPERAMOS'.... -------> VEREMOS ISSO MAIS TARDE,




VEREMOS COMO O 




INTEGRATION TEST TEM RELAÇAÕ COM 


OS UNIT TESTS,



E COMO PODEMOS ESCREVER INTEGRATION TESTS....


















END2END TESTING --> É UM TIPO DE TESTING QUE NÃO TEM RELAÇÃO DIRETA
 
 COM 

 'UNIT TESTING' 


 E 


 'INTEGRATION TESTING'...














 A IDEIA DE 


 'E2E TESTING' -> É QUE VC VAI TESTAR 'USER BEHAVIORS',

 OU 





API INTERFACES ESPECÍFICAS QUE 

SEU APP 



TALVEZ PROVIDENCIE... -> ISSO QUER DIZER QUE 

VC 

VAI 

TESTAR 



'ENTIRE FLOWS,

ENTIRE APP FEATURES' --> como por EXEMPLo,



se estamos BUILDANDO 1 API ENDPOINT DE IMAGE UPLOAD,



VC __ TALVEZ QUEIRA __ 

TESTAR 



O WORKFLOW 

INTEIRO 


DE 

UPLOAD DE IMAGE (

QUE INCLUI 

'EXTRACT DA IMAGE DO INCOMING REQUEST' 

E 

'STORE DA IMAGE NO FILESYSTEM'...

)













COM OS UNIT TESTS,

VC 

TESTARIA 


O 

'EXTRACTION'



E 

O 

'STORE'...












COM O INTEGRATION TEST,


VC TESTARIA 


'EXTRACTION + STORE'..










--> COM O 'EN2END'

TESTING,

VC TESTA 

O ACTUAL _ FLOW,

O FLOW INTEIRO ----------> ISSO QUER DIZER QUE, COM 'E2E' TESTS,



VC 



TESTA _ AS COISAS QUE _ USERS_ _VERDADEIROS,
INTERAGINDO COM SEU PROGRAMA,

FARIAM...












-> OS E2E TESTS 

SÃO OS TIPOS DE TEST MAIS REALISTAS,








MAS TRAZEM SUAS PRÓPRIAS CHALLENGES...














-> MAS VC DEVE COMBINAR ESSES 3 TIPOS DE 



TESTS NO SEU PROJECT...













VC QUER:





1) ADICIOANR MTOS UNIT TESTS 



2) ALGUNS INTEGRATION TESTS 




3) POUCOS E2E TESTS,

PARA 



ALGUNS USER BEHAVIORS TÍPICOS,

E PARA 



ALGUNS PROCESSOS COMPLETOS QUE 

ACONTECERÃO

DENTRO DO SEU APP....

















UNIT TESTS --> TE DEIXAM 'QUICKLY SPOT AND PINPOINT 
BREAKING CHANGES AND ERRORS'....




É FÁCIL VER QUE PARTE DE 1 APP É AFETADO POR CHANGES,

PQ 

TESTAMOS 


TODAS ESSAS PARTES INDIVIDUALMENTE...









------> MAS 1 PROBLEMA DOS UNIT TESTS É QUE 

ELES 


'IGNORAM 

OS USER FLOWS 

E INTERFERENCES',





PQ __ VC TESTA APENAS OS INVDIVIDUAL BUILDING BLOCKS..


















integration testing ----> VC ACABA TESTANDO APENAS 


AS COMBINATIONS QUE VC QUER TESTAR (


    COM ISSO,

    NÃO É TESTADO 


    O COMPORTAMENTO INTEIRO 
    DO USUÁRIO,

    E SIM APENAS ALGUMAS SELECT COMBINATIONS 


    DE UNITS...

)













COM INTEGRATION TESTING,

PODE SER MEIO DIFÍCIL 


NOTAR EM QUE 

PARTE 


DO SEU APP ALGO QUEBROU,



PQ 

  

  VC ESTARÁ TESTANDO A __ COMBINAÇÃO DE USERS...

















  E2E TESTING --> VC TESTA OS PROCESSOS 

  REALISTAS,

  O QUE 

  REALMENTE ACONTECE NO SEU APP --> O PROBLEMA 

  DESSE TIPO DE APP 


  É QUE 

  'COVERING ALL POSSIBLE BEHAVIORS CAN BE CHALLENGING '-> SE ALGO 


  QUEBRAR, DE VERDAED,




  É MEIO DIFÍCIL IDENTIFICAR QUE PARTE 

  DE NOSSO CÓDIGO LEVOU A ESSE BREAK...















-------> OK...










COMO MENCIONADO,

VC TIPICAMENTE QUER ADICIONAR 


TODOS ESSES TIPOS DE TEST...










TIPICAMENTE USAMOS 1 CONCEITO DE 'TESTING PYRAMID',

EM QUE TEMOS:











       111111
  22222222222222
3333333333333333333









333 ------> mtos unit tests, BASICAMENTE TESTS PARA TODAS AS UNITS QUE FORMAM SEU APP,
TODAS SUAS FUNCTIONS E CLASSES -------> E, TIPICAMENTE,

__ NÃO SÓ 1 TEST POR UNIT,

MAS MÚLTIPLOS TESTS POR UNIT...










2222 --> ALGUNS INTEGRATION TESTS...





111 ----> POUCOS E2E TESTS,

PARA OS BEHAVIORS E PROCESSES MAIS IMPORTANTES NO SEU APP..












MAS É CLARO QUE 



ESSA NÃO É UMA HARD RULE,



PQ HÁ PESSOAS QUE DIZEM QUE 




''VC DEVE TER MAIS E2E TESTS DO QUE UNIT TESTS'...







MAS SABER TODOS OS TIPOS DE TEST É UMA BOA IDEIA...







COM ESSE CURSO,

VEREMOS COMO WRITE 

E 

ADD 

UNIT E INTEGRATION TEST..... (são fundamentals 
que vc precisa saber,

quando o assunto é o write de automated tests para seus programas...
)