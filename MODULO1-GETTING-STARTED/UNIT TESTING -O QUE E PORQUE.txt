










OK... AUTOMATED TESTING É ALGO QUE DEVEMOS CONSIDERAR 

ADICIONAR NO NOSSO PROJETO..










MAS EXISTEM DIFERENTES TIPOS DE TEST...













--> COMEÇAMOS COM 'UNIT TESTS'..










MAS O QUE SÃO 'UNITS'?









-- UNITS --> SÃO O BUILDING BLOCK DE SEU APP --> IDEALMENTE,



ELAS SÃO 




OS SMALLEST POSSIBLE BUILDING BLOCKS...












--> MAS O QUE SÃO APP BUILDING BLOCKS?









SÃO FUNCTIONS, CLASSES, COMPONENTS,

ETC..












--. MAS SÃO FUNCTIONS EM GERAL...











--> MAS SE FALAMOS EM 'UNIT',



ESTAMOS BASICAMENTE FALANDO EM 1 'FUNCTION',



OU ENTÃO 


1 CLASS, NO SEU OVERALL CODE...













-> E TODAS ESSAS UNITS,

COMBINADAS,




FORMAM NOSSO APP.. -> E, NO NOSSO APP,


TEMOS MÚLTIPLAS 



FUNCTIONS E CLASSES 

TRABALHANDO JUNTO,




E, PORTANTO,


NOSSO APP 
É ENTÃO 

FEITO
 


 DESSAS FUNCTIONS E CLASSES,

 E DE TODAS ESSAS UNITS...











 APP = COMBINATIONS DE TODAS ESSAS UNITS...












 E A IDEIA POR TRÁS DO UNIT TESTING É QUE 



 __ ESCREVEMOS _ TESTS _ PARA ESSAS UNITS INDIVIDUAIS...












 SE TODAS ESSAS UNITS FOREM 

 TESTADAS,



 SIGNIFICA QUE O APP INTEIRO FUNCIONA..












 ENTRETANTO,


 OS UNIT TESTS GERALMENTE 

 SÃO COMBINADOS COM 'INTEGRATION TESTS' (que são tests de tudo junto, basicamente)...













 OK.. E SEMPRE QUE FAZEMOS ALGUMA MUDANÇA NO NOSSO CÓDIGO,

 PODEMOS RODAR TODOS OS TESTS DE NOVO,

 O QUE 

 DEIXA BEM FÁCIL O 'DETECT'

 SE 


 CERTA MUDANÇA EM NOSSO CÓDIGO RESULTOU 



 EM ALGUM BREAK/CHANGE EM OUTRA UNIT,


 TAMBÉM..











 --> EX:


 SE MUDAMOS ALGO NO ARQUIVO '1'



 E ISSO TIVER ALGUMA INFLUÊNCIA 


 EM ALGUMA OUTRA FUNCTION, EM OUTRA FILE,









 COM A AJUDA DOS UNIT TESTS,

 SE ESCREVEMOS 

 TESTS 
 PARA TODAS AS UNITS,



 E SE ESCREVEMOS OS TESTS CORRETOS,

 VAMOS DESCOBRIR SE QUEBRAMOS ALGUMA COISA...















 ADICIONALMENTE,




DIGAMOS QUE ESTAMOS TRABALHNADO 


EM 1 


PIECE OF CODE JÁ EXISTENTE... -> OS UNIT TESTS 


PODEM NOS DIZER SE QUEBRAMOS ALGUM ASPECTO DESSA FUNCTION,


ALGUMA COISA DELA...
















--> OK... OS UNIT TESTS FAZEM ISSO,

TESTAM OS DIFERENTES 

EXPECTED BEHAVIORS 

DAS CORE BUILDING BLOCKS 



DE NOSSO APP... -> TIPICAMENTE,

DE NOSSAS 

FUNCTIONS E CLASSES...













OK, MAS PQ 


ADICIONARÍAMOS ESSAS UNIT TESTING?











-> BEM, É PQ SE TODAS ESSAS DIFERENTES UNITS FOREM TESTADAS,


PODEMOS EVITAR QUANTIDADES ABSURDAS 


DE 

MANUAL TESTING,





pq 




ESSES TESTES SERÃO TODOS AUTOMATIZADOS (



    toda a code-base poderá ser testada 



    por 




    1 PROCESSO AUTOMATIZADO,



    BEM MAIS RÁPIDO E SIMPLES....
)










-> OS UNIT TESTS 


TAMBÉM 


TE DEIXAM 'COBRIR' QUASE 100% DO SEU CÓDIGO,


100% DOS SEUS CENÁRIOS...









--> SEMPRE QUE 

MUDAMOS ALGUMA COISA NO NOSSO CÓDIGO,

PODEMOS 
RODAR OS UNIT TESTS 

PARA 




DESCOBRIR SE HÁ ALGUNS EFFECTS ENTRE 

ESSAS DIFERENTES UNITS,


E SE QUEBRAMOS ALGUMA COISA...













--> E O QUE APRENDEREMOS 

NESSE CURSO,


É QUE 




'ADICIONAR UNIT TESTS NO SEU CÓDIGO'


VAI TE FORÇAR A ESCREVER 



CÓDIGO MAIS CLEAN E MELHOR --> PQ O __ TESTING É MAIS FÁCIL 

SE 
O 

SEU 

CÓDIGO 


PRINCIPAL FOR CLEAN __ E ESCRITO DE 1 MANEIRA BOA..











--> OK... ESSE É O UNIT TESTING,



E É ISSO QUE UNITS SÃO...











--> E ESTE CURSO É PRIMARIAMENTE SOBRE UNIT TESTING..








