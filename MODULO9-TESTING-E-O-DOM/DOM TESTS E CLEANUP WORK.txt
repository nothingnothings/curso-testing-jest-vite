






OK... ACABAMOS O PRIMEIRO TEST NO DOM:












import { it, expect, describe } from 'vitest';
import { vi } from 'vitest';
import { showError } from './dom';
import { Window } from 'happy-dom';

import fs from 'fs'; // usado para IMPORTAR 1 FILE (o 'index.html') NO VIRTUAL DOM PRODUZIDO PELO 'HAPPY-DOM'...
import path from 'path'; // usado para IMPORTAR 1 FILE NO VIRTUAL DOM PRODUZIDO PELO 'HAPPY-DOM'...

const htmlDocPath = path.join(process.cwd(), 'index.html'); //path de noso arquivo html
const htmlDocumentContent = fs.readFileSync(htmlDocPath).toString(); //conteúdo de nosso arquivo html

const window = new Window(); //criamos 1 'window' (1 DOM VIRTUAL) com o 'happy-dom'...
const document = window.document; //criamos 1 'document' (1 DOM VIRTUAL) com o 'happy-dom'...

document.write(htmlDocumentContent); //escrevemos o conteúdo de nosso arquivo html no 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...

vi.stubGlobal('document', document); //criamos 1 stub global para o 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...

// describe('first test', () => {
//   ISSO FALHARÁ --> FALHARÁ PQ NÃO TEMOS, NATIVAMENTE, ACESSO AO 'DOM' COM O VITEST...
//   it('first test', () => {
//     ganharemos 'document is not defined'...
//     showError('some message');
//   });
// });

describe('showError', () => {
  it('should add an error paragraph to the id="errors" element', () => {
    //ARRANGE
    const message = 'some error';
    const errorsElement = document.getElementById('errors');
    //ACT
    showError(message);
    const errorParagraph = errorsElement.firstElementChild;
    //ASSERT
    expect(errorParagraph).not.toBeNull(); //verificamos SE ESSE ELEMENT NÃO ESTÁ COMO 'null' (ou seja, se ele EXISTE)...
  });
});

// --> SE O ELEMENTO PARAGRAPH NÃO EXISTISSE DENTRO

// DAQUELE ELEMENT,

// ELE SERIA 'null' (

//   é assim que fazemos, para checar se coisas FORAM RENDERIZADAS NO DOM...
// )











------------------










OK... MAS O PROFESSOR ADICIONA 1 SEGUNDO TEST...










NESSE SEGUNDO TEST, ELE CHECA 




''' NOSSO DOM NÃO DEVERÁ TER 1 PARAGRAPH DE ERROR, INICIALMENTE'''...












---> PARA FAZER ESSE CÓDIGO FUNCIONAR,



PRECISEI ESCREVER 1 'CLEANUP FUNCTION',


com 'beforeEach':










import { it, expect, describe } from 'vitest';
import { vi } from 'vitest';
import { beforeEach } from 'vitest';
import { showError } from './dom';
import { Window } from 'happy-dom';

import fs from 'fs'; // usado para IMPORTAR 1 FILE (o 'index.html') NO VIRTUAL DOM PRODUZIDO PELO 'HAPPY-DOM'...
import path from 'path'; // usado para IMPORTAR 1 FILE NO VIRTUAL DOM PRODUZIDO PELO 'HAPPY-DOM'...

const htmlDocPath = path.join(process.cwd(), 'index.html'); //path de noso arquivo html
const htmlDocumentContent = fs.readFileSync(htmlDocPath).toString(); //conteúdo de nosso arquivo html

let window; //criamos 1 'window' (1 DOM VIRTUAL) com o 'happy-dom'...
let document; //criamos 1 'document' (1 DOM VIRTUAL) com o 'happy-dom'...

// document.write(htmlDocumentContent); //escrevemos o conteúdo de nosso arquivo html no 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...

// vi.stubGlobal('document', document); //criamos 1 stub global para o 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...

// describe('first test', () => {
//   ISSO FALHARÁ --> FALHARÁ PQ NÃO TEMOS, NATIVAMENTE, ACESSO AO 'DOM' COM O VITEST...
//   it('first test', () => {
//     ganharemos 'document is not defined'...
//     showError('some message');
//   });
// });

describe('showError', () => {
  beforeEach(() => {
    window = new Window();
    document = window.document;
    document.write(htmlDocumentContent); //escrevemos o conteúdo de nosso arquivo html no 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...
    vi.stubGlobal('document', document); //criamos 1 stub global para o 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...
  });

  it('should add an error paragraph to the id="errors" element', () => {
    //ARRANGE
    const message = 'some error';
    const errorsElement = document.getElementById('errors');
    //ACT
    showError(message);
    const errorParagraph = errorsElement.firstElementChild;
    //ASSERT
    expect(errorParagraph).not.toBeNull(); //verificamos SE ESSE ELEMENT NÃO ESTÁ COMO 'null' (ou seja, se ele EXISTE)...
  });

  // --> SE O ELEMENTO PARAGRAPH NÃO EXISTISSE DENTRO

  // DAQUELE ELEMENT,

  // ELE SERIA 'null' (

  //   é assim que fazemos, para checar se coisas FORAM RENDERIZADAS NO DOM...
  // )

  it('should not contain an error paragraph, initially', () => {
    //ARRANGE
    const message = 'some error';
    const errorsElement = document.getElementById('errors');
    let errorParagraph = errorsElement.firstElementChild;
    //ASSERT
    expect(errorParagraph).toBeNull(); //verificamos SE ESSE ELEMENT ESTÁ COMO 'null' INICIALMENTE (ou seja, se ele EXISTE)...
    //ACT
    showError(message);
    errorParagraph = errorsElement.firstElementChild;
    //ASSERT
    expect(errorParagraph).not.toBeNull();
  });
});












E ISSO FUNCIONOU, TODOS OS TESTS PASSARAM...














MAS O PROFESSOR NOS MOSTRA UMA SOLUÇÃO MAIS ELEGANTE, QUE É ESTA:














import { it, expect, describe } from 'vitest';
import { vi } from 'vitest';
import { beforeEach } from 'vitest';
import { showError } from './dom';
import { Window } from 'happy-dom';

import fs from 'fs'; // usado para IMPORTAR 1 FILE (o 'index.html') NO VIRTUAL DOM PRODUZIDO PELO 'HAPPY-DOM'...
import path from 'path'; // usado para IMPORTAR 1 FILE NO VIRTUAL DOM PRODUZIDO PELO 'HAPPY-DOM'...

const htmlDocPath = path.join(process.cwd(), 'index.html'); //path de noso arquivo html
const htmlDocumentContent = fs.readFileSync(htmlDocPath).toString(); //conteúdo de nosso arquivo html

// let window; //criamos 1 'window' (1 DOM VIRTUAL) com o 'happy-dom'...
// let document; //criamos 1 'document' (1 DOM VIRTUAL) com o 'happy-dom'...

const window = new Window(); //criamos 1 'window' (1 DOM VIRTUAL) com o 'happy-dom'...
const document = window.document; //criamos 1 'document' (1 DOM VIRTUAL) com o 'happy-dom'...
vi.stubGlobal('document', document); //criamos 1 stub global para o 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...
// document.write(htmlDocumentContent); //escrevemos o conteúdo de nosso arquivo html no 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...

// vi.stubGlobal('document', document); //criamos 1 stub global para o 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...

// describe('first test', () => {
//   ISSO FALHARÁ --> FALHARÁ PQ NÃO TEMOS, NATIVAMENTE, ACESSO AO 'DOM' COM O VITEST...
//   it('first test', () => {
//     ganharemos 'document is not defined'...
//     showError('some message');
//   });
// });

describe('showError', () => {
  beforeEach(() => {
    //exemplo de 'cleanup work', para realizar múltiplos tests sobre o mesmo document...

    // window = new Window(); //! versão menos elegante de 'reset' do dom a partir de cada test.
    // document = window.document;
    // document.write(htmlDocumentContent); //escrevemos o conteúdo de nosso arquivo html no 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...
    // vi.stubGlobal('document', document); //criamos 1 stub global para o 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...

    //? VERSÃO MAIS ELEGANTE DE 'reset' do dom a partir de cada test
    document.body.innerHTML = ''; //limpamos o 'body' do 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...
    document.write(htmlDocumentContent); //escrevemos o conteúdo de nosso arquivo html no 'document' (1 DOM VIRTUAL) criado com o 'happy-dom'...
  });

  it('should add an error paragraph to the id="errors" element', () => {
    //ARRANGE
    const message = 'some error';
    const errorsElement = document.getElementById('errors');
    //ACT
    showError(message);
    const errorParagraph = errorsElement.firstElementChild;
    //ASSERT
    expect(errorParagraph).not.toBeNull(); //verificamos SE ESSE ELEMENT NÃO ESTÁ COMO 'null' (ou seja, se ele EXISTE)...
  });

  // --> SE O ELEMENTO PARAGRAPH NÃO EXISTISSE DENTRO

  // DAQUELE ELEMENT,

  // ELE SERIA 'null' (

  //   é assim que fazemos, para checar se coisas FORAM RENDERIZADAS NO DOM...
  // )

  it('should not contain an error paragraph, initially', () => {
    //ARRANGE
    const message = 'some error';
    const errorsElement = document.getElementById('errors');
    let errorParagraph = errorsElement.firstElementChild;
    //ASSERT
    expect(errorParagraph).toBeNull(); //verificamos SE ESSE ELEMENT ESTÁ COMO 'null' INICIALMENTE (ou seja, se ele EXISTE)...
    //ACT
    showError(message);
    errorParagraph = errorsElement.firstElementChild;
    //ASSERT
    expect(errorParagraph).not.toBeNull();
  });
});
















certo...









ficou bem melhor...





E TODOS NOSSOS TESTS PASSAM, agora com o reset correto do DOM



TODA VEZ QUE RODAMOS 1 NOVO TEST...