
















--> OK... ACABAMOS COM ESTE MÓDULO, SOBRE MOCKING..









APRENDEMOS SOBRE O QUE SÃO 'MOCKS' 

E 

'SPIES'...










HÁ UMA SIMILARIEDADE ENTRE OS 2,



MAS:







1) MOCKS SÃO SOBRE O REPLACE DE MODULES INTEIROS -> E, FREQUENTEMENTE,

ESSE TÓPICO ENVOLVE A CONFECÇÃO DE SUAS PRÓPRIAS IMPLEMENTATIONS (no lugar do comportamento default, como 'write to a file' ou  'send an http requests')...


--> OS EXEMPLOS CLÁSSICOS DISSO SÃO 


o method call de 'vi.mock(nome-do-module, () => {sua implementação})',


como este:





vi.mock('path', () => {
  // TODO - COM ISSO, TENTO SIMPLIFICAR AO MÁXIMO O CÓDIGO QUE EXECUTO NO MEU TEST... (substituo o MÓDULO INTEIRO de 'path' POR ESSA EXECUÇÃO AÍ...)
  return {
    default: {
      join: (...args) => {
        return args[args.length - 1]; //? com isso, conseguimos retornar APENAS 'fileName'
      },
      // basename: ,  //outras propriedades/methods do module de 'path' que podemos customizar...
      // format: ,
    },
  };
});











E TAMBÉM A PASTA DE '__mocks__',


EM QUE TEMOS ESTE CÓDIGO-EXEMPLO:
















///cada module que está dentro de '__mocks__' é um MOCK IMPLEMENTATION...
//(será 1 module que vc vai querer mockar) -->
//vc vai querer SUBSTITUIR O COMPORTAMENTO DEFAULT DESSE MODULE,
// AS PROPERTIES E METHODS, POR ESSAS PROPERTIES E METHODS QUE VC VAI DEFINIR NESTA FILE

import { vi } from 'vitest';

export const promises = {
  writeFile: vi.fn((path, data) => {
    // com isso, podemos escrever nossa própria implementation para essa spy function...
    //e vamos IMITAR O FORMATO DO 'writeFile' DO 'fs', mas sem o actual write de content a 1 file em nosso file system (sem side effects, portanto)...
    return new Promise((resolve, reject) => {
      resolve(); //fazemos 'resolve()' to nothing, exatamente como na function original de 'fs.writeFile()'..
    });
  }),
};















--> NESSE FOLDER TEMOS FILES COM OS NOMES DOS MODULES QUE VAMOS MOCKAR (é obrigatório ter esses nomes)...





-> VC PERCEBERÁ QUE, EM PROJETOS MAIORES,

VC TERÁ 



TESTS QUE 

TERÃO SIDE EFFECTS,





CERTOS MODULES QUE VC REALMENTE NAÕ VAI QUERER TRIGGAR, ETC...








--> NESSES CASOS,

OS SPIES E MOCKS SERÃO SEUS AMIGOS,

E TE AJUDARÃO A NÃO TRIGGAR CÓDIGO DESNECESSÁRIO (com side effects)....