







OK.... 





PARA CONCLUIR ESTA SECTION,


HÁ 


1 ÚLTIMA FEATURE INTERESSANTE,



QUE 



É PROVIDENCIADA TANTO PELO JEST COMO VITEST...
















--> VC PODE __ 'RODAR SEUS TESTS CONCORRENTEMENTE'....











--> E ISSO PODE SER INTERESSANTE PARA 'SPEED UP' 


O OVERALL TIME QUE 




LEVAMOS PARA _ EXECUTAR TODOS NOSSOS TESTS..









POR DEFAULT,



TEMOS CÓDIGO TIPO ASSIM:














import { it, expect } from 'vitest';

import { User } from './hooks';

import { beforeAll, beforeEach, afterEach, afterAll } from 'vitest'; ///SÃO OS HOOKS QUE PODEMOS IMPORTAR, LÁ DO VITEST (para ter 'prep work' e 'clean up work')....

// const testEmail = 'test@test.com'; // ISTO NÃO É UM HOOK DE TEST, MAS __ É UM EXEMPLO DE COMO PODEMOS DEFINIR E USAR 'GLOBAL CONSTANTS' NOS NOSSOS TESTS (aí não precisamos reescrever isso toda hora, em todos os tests)...
// const user = new User(testEmail); // * VAMOS UTILIZAR ESSE OBJECT PARA DEMONSTRAR OS HOOKS (beforeAll, beforeEach, afterEach, afterAll)...

let user;
let testEmail;

beforeAll(() => {
  // * ESTE É UM HOOK DE TEST (é um hook que vai rodar antes de TODOS os tests)...
  console.log('BEFORE ALL');
  user = new User(testEmail);
});

beforeEach(() => {
  // * ESTE É UM HOOK DE TEST (é um hook que vai rodar antes de CADA test)...
  // * É UM EXEMPLO DE COMO PODEMOS DEFINIR E USAR 'GLOBAL CONSTANTS' NOS NOSSOS TESTS (aí não precisamos reescrever isso toda hora, em todos os tests)...
  console.log('BEFORE EACH');
  user = new User(testEmail);
  testEmail = 'test@test.com';
});

afterAll(() => { /// TODO - VOCê PODE USAR ESSE TEST PARA 'CLEANUP WORK', para limpar 1 database que vc criou em 'beforeAll', por exemplo...
  // * ESTE É UM HOOK DE TEST (é um hook que vai rodar depois de TODOS os tests)...
  console.log('AFTER ALL');
});

afterEach(() => {
  // * ESTE É UM HOOK DE TEST (é um hook que vai rodar depois de CADA test)...
  console.log('AFTER EACH');
});

it('should have an email property', () => {
  //ARRANGE
  // const testEmail = 'test@test.com';
  //ACT
  // const user = new User(testEmail); // TODO - EXEMPLO DE UTILIZAÇÃO DE HOOK (pq sempre vamos instanciar 'User', pq todos os tests envolvem a criação desse object)...
  //ASSERT
  expect(user).toHaveProperty('email');
});

it('should update the email', () => {
  //ARRANGE
  // const testEmail = 'test@test.com';
  const newTestEmail = 'test2@test.com';
  //ACT
  // const user = new User(testEmail);
  user.updateEmail(newTestEmail);
  //ASSERT
  expect(user.email).toBe(newTestEmail);
});

it('should store the provided email value', () => {
  //ARRANGE
  // const testEmail = 'test@test.com';
  //ACT
  // const user = new User(testEmail);
  //ASSERT
  expect(user.email).toBe(testEmail);
});

it('should clear the email', () => {
  //ARRANGE
  // const testEmail = 'test@test.com';
  //ACT
  // const user = new User(testEmail);
  user.clearEmail();
  //ASSERT
  expect(user.email).toBe('');
});

it('should still have an email property after clearing the email', () => {
  //ARRANGE
  // const testEmail = 'test@test.com';
  //ACT
  // const user = new User(testEmail);
  user.clearEmail();
  ///ASSERT
  expect(user).toHaveProperty('email');
});

// SE VC TIVER 1 FILE COM MÚLTIPLOS 'TESTING SUITES' (describe),

// vc ___

// PODE __ TAMBÉM COLOCAR

// SEUS HOOKS EM

// 1 'SUITE' LEVEL... (dentro de

// cada suite..
// )

// --> SE VC COLOCA ESSES HOOKS DENTRO DE 1 SUITE,

// ESSES HOOKS VÃO SER APLICADOS NA SUITE ONLY ...

// --> já se vc COLOCAR SEUS HOOKS NO 'ROOT LEVEL' DE SEU ARQUIVO
// DE

// TEST,

// A LÓGICA DOS HOOKS VAI SER APLICADA EM 1 GLOBAL LEVEL,

// VAI SER APLICADA

// __ EM TODOS OS TESTS NA FILE...



















E É CLARO QUE ESSE CÓDIGO VAI RODAR  





TOP TO BOTTOM,


TESTS 

SENDO 
EXECUTADOS 


'ONE AFTER ANOTHER',










e é isso...















--> E ISSO FREQUENTEMENTE 

É __ PERFECTLY FINE...















MAS EXISTE 1 OUTRA OPÇÃO... --> VC PODE, SE DESEJAR,



ADICIONAR 



O METHOD DE 


'it.concurrent()',












NO PRÓPRIO IT...










--> AÍ, DENTRO DE 'concurrent()',


VC 


PASSA 

BASICAMENTE 

AS MESMAS COISAS NO IT..








ex:





it.concurrent('should update the email', () => {
  //ARRANGE
  // const testEmail = 'test@test.com';
  const newTestEmail = 'test2@test.com';
  //ACT
  // const user = new User(testEmail);
  user.updateEmail(newTestEmail);
  //ASSERT
  expect(user.email).toBe(newTestEmail);
});


-------------------------------












SE VC COLOCAR 'concurrent',

ESSE TEST VAI RODAR 'CONCURRENTEMENTE,'


VAI 


RODAR__ PARALELAMENTE 

COM TODOS OS OUTROS TESTS QUE TIVEREM ESSA ANNOTATION...










EX:










// it.concurrent('should update the email', () => { /// TODO - ESTE É UM EXEMPLO DE COMO VC PODE RODAR SEUS TESTS EM PARALELO (se vc tiver 1 test que demora muito, vc pode rodar ele em paralelo com outros tests, para ganhar tempo)...
//   ARRANGE
//   const newTestEmail = 'test2@test.com';
//   ACT
//   user.updateEmail(newTestEmail);
//   ASSERT
//   expect(user.email).toBe(newTestEmail);
// });



-----------------------------















ISSO PODE DEIXAR SEUS TESTS 1 POUCO MAIS RÁPIDOS...








ESSA FEATURE PODE SER ÚTIL SE VC TIVER 1 QUANTIDADE ABSURDA DE TESTS...











VC TAMBÉM PODE ADICIONAR 

'concurrent'

EM 1 TEST NÃO SÓ 




na 

function de 'it()',

mas 

TAMBÉM 




NO PRÓPRIO 'describe'...


TIPO ASSIM:








'describe.concurrent()'









ex:








// 'describe.concurrent()' // TODO - ESTE É UM EXEMPLO DE COMO VC PODE RODAR TODOS OS TESTS EM 1 DESCRIBE BLOCK EM PARALELO (se vc tiver 1 test que demora muito, vc pode rodar ele em paralelo com outros tests, para ganhar tempo)...
 


















 --> se vc faz isso,

 vc pode 



 RODAR 


TODOS OS TESTS 



EM PARALELO,


DENTRO 


DESSA SUITE...












---> CERTO...







PARA PEQUENAS QUANTIDADES DE TEST,

ISSO NÃO FARÁ DIFERENÇA.... MAS PARA GRANDES QUANTIDADES DE TESTS,

ESSA PODE SER UMA BOA FEATURE...










EX:











Even when not adding the .concurrent property / annotation, tests that are stored in different files are executed concurrently (i.e., in parallel). This is done by both Vitest and Jest - ensuring that your tests run in a short amount of time.

With .concurrent you can enforce this behavior also inside the individual files (i.e., tests that live in one and the same file are executed concurrently).

Concurrent execution can reduce the amount of time your tests need to execute. A downside of concurrent execution is, that tests that perform clashing (global) state manipulations may interfere with each other.



