













--> OK... AGORA QUE APRENDEMOS SOBRE TESTS QUE 

TESTAM A COMBINATION DE FUNCTIONS (INTEGRATION TESTS),


ISSO 

PODE TRAZER A PERGUNTA DE 


'COMO DEVEMOS BALANCEAR 


OS DIFERENTES TIPOS DE TEST?'' 








DEVEMOS SER O MAIS GRANULARES POSSÍVEIS,


OU DEVEMOS TESTAR MAIS FUNCTIONS COMO cleanNumbers,

em que 



MÚLTIPLAS FUNCTIONS SÃO TESTADAS DE 1 VEZ SÓ,

POR 

MEIO DO TEST DE 1 ÚNICA FUNCTION...












--> BEM, MAS VOCê NÃO DEVE FAZER ISSO --> VC DEVE 


TESTAR __ 


A MAIOR QUANTIDADE DE FUNCTIONS DE MODO STANDALONE POSSÍVEL,









MAS VC NÃO DEVE COMEÇAR A SPLITTAR SEU CÓDIGO 



EM VÁRIAS FUNCTIONS STANDALONE DE FORMA DESNECESSÁRIA ------> MAS SER GRANULAR 


E 

ESCREVER 


TESTS PARA ESSAS STANDALONE FUNCTIONS VAI TE AJUDAR A 'NAIL DOWN'

OS 

ERRORS,

 SE ELES ACONTECEREM, SE SEUS TESTS COMEÇAREM A FALHAR...












 MAS VC DEVE TAMBÉM , ADICIONALMENTE,



 TER ESSES INTEGRATION TESTS EM QUE VC 

 TESTA A COMBINAÇÃO DE MÚLTIPLAS FUNCTIONS,

 1 COM AS OUTRAS... -----> ISSO PQ É A COMBINAÇÃO 

 DE FUNCTIONS QUE FORMA SEU APP,


E AS COISAS PODEM DAR ERRADO,

PQ 

VC 

PODE 

ESTAR 


USANDO ESSAS FUNCTIONS (QEU FUNCIONAM STANDALONE)

DE FORMA ERRADA, EM CONJUNTO....













--> OK... MAS É CLARO QUE TEREMOS BEM MAIS UNIT TESTS DO QUE INTEGRATION TESTS..










-> MAS TEREMOS INTEGRATION TESTS,

SIM...











É CLARO QUE EXISTEM DIFERENTES FILOSOFIAS SOBRE TESTING,


MAS É BEM COMUM TER 

MAIS 
UNIT 

TESTS DO QUE COMBINED TESTS...













--> ALÉM DE 'UNIT' E 'INTEGRATION' TESTS,



TEMOS 


END-TO-END TESTS -------> A IDEIA POR TRÁS DESSES 


TESTS É DIFERENTE --> PQ 


LÁ VC TESTA ENTIRE USER FLOWS E PROCESSES,


PQ 
VC TESTA O QUE OS USERS VÃO REALMENTE VER...












-> END TO END --> TESTAM 1 MONTE DE UNITS EM COMBINAÇÃO... --> CERTO... 





E HÁ FILOSOFIAS QUE DIZEM QUE VC DEVE TER __ VÁRIOS END TO END TESTS 

DO QUE 

ATÉ MESMO UNIT TESTS....











--> MAS TUDO ISSO DEPENDE DA PESSOA... --> APESAR DE TER MÚLTIPLOS 

UNIT TESTS É 

MELHOR... --> E VC PODE COMBINAR ESSES UNIT TESTS 

EM ALGUNS 

INTEGRATION TESTS,

E AÍ 




colocar alguns end-to-end tests,

para 

as coisas mais 


importantes do seu app...









TER GRANULAR, STANDALONE FUNCTIONS,

É ALGO QUE VC ABSOLUTAEMNTE DEVE FAZER,




EM CONJUNTO COM A COMBINAÇÃO DE UNITS (integration tests)....