













-> VAMOS COMEÇAR COM O WRITE DE TESTS PARA 'cleanNumbers'...







 
 O PROFESSOR COMEÇA PELO ADD DE ALGUMAS SUITES...









NOSSO CÓDIGO É ESTE:






(arquivo resultConstructor):




import { transformToNumber } from '../util/numbers.js';
import { validateStringNotEmpty, validateNumber } from '../util/validation.js';
import { add } from '../math.js';

export const resultConstructor = (numberInputs) => {
  let result = '';
  try {
    const numbers = cleanNumbers(numberInputs);
    result = add(numbers).toString();
  } catch (error) {
    result = error.message;
  }

  return result;
};

//HELPER FUNCTION - EXAMPLE OF INTEGRATION TESTS
const cleanNumbers = (numberInputs) => {
  const numbers = [];
  for (const numberInput of numberInputs) {
    validateStringNotEmpty(numberInput);
    const number = transformToNumber(numberInput);
    validateNumber(number);
    numbers.push(number);
  }

  return numbers;
};



















--> E O CÓDIGO DE TESTS VAI COMEÇAR ASSIM:







import { it, expect, describe } from 'vitest';
import { resultConstructor } from './resultConstructor.js';

describe('resultConstructor', () => {
  it('should always return a string', () => {
    // ARRANGE AND ACT
    const result = resultConstructor();

    // ASSERT
    expect(result).toBeTypeOf('string');
  });

  it('should return the sum of passed numbers as a string, if an array of numbers in string format is provided as an argument', () => {
    // ARRANGE AND ACT
    const result = resultConstructor(['1', '2']);

    // ASSERT
    expect(result).toBe('3');
  });

  it('should return an error if an array of numbers is provided as an argument', () => {
    // ARRANGE AND ACT
    const result = resultConstructor([1, 2]);

    // ASSERT
    expect(result).toBe('value.trim is not a function');
  });
});











É CLARO QUE ESSES TESTS AÍ 
SÃO DA FUNCTION 'OVERALL'


E NÃO 


DA FUNCTION DE 'cleanNumbers',



que EXISTE/É CHAMADA 

DENTRO 


DESSA FUNCTION...









OK.... VAMOS COLOCAR 1 DESCRIBE PARA A FUNCTION DE 'cleanNumbers'...








TIPO ASSIM:



describe('cleanNumbers', () => {


  
});









AÍ PODEMOS COMEÇAR COM O WRITE DE 1 PRIMEIRO TEST...






SEMPRE COMEÇAMOS COM A 'CORE FUNCTIONALITY' QUE NOSSA FUNCTION 

DEVE PROVIDENCIAR...








NO CASO, ELA DEVE _ RETORNAR 1 ARRAY DE NUMBERS...








EX:














describe('cleanNumbers', () => {
  it('should return an array of numbers if an array of numbers in string format is provided as an argument', () => {
    // ARRANGE AND ACT
    const value = ['1', '2'];

    //ACT
    const result = cleanNumbers(value);

    // ASSERT
    expect(result).toEqual([1, 2]);
  });
});












mas podemos melhorar o 'expect' desse test..












O PROFESSOR DIZ QUE EXISTEM DIFERENTES MANEIRAS DE FORMULAR O 'expect'

desse test:









   // ASSERT
    expect(result).toEqual([1, 2]);














-- PODERÍAMOS DIZER QUE A EXPECTATION É QUE 


o 


'PRIMEIRO ELEMENTO DO ARRAY SEJA DE TYPE NUMBER'. ----> 



TIPO ASSIM:




const cleanedNumbers = cleanNumbers(['1', '2']);


expect(cleanedNumbers[0]).toBeTypeOf('number');


















--> certo... 





NA OUTRA PARTE DO CURSO,

VEREMOS 

ALGUMAS FEATURES MAIS AVANÇADAS DO VITEST...















--> CERTO... 






MAS É CLARO QUE,







AO RODARMOS 'cleanNumbers',





TECNICAMENTE ESTAMOS FICANDO COM 1 INTEGRATION TEST,


PQ 



ESTAMOS INDIRETAMENTE CHAMANDO 




AS FUNCTIONS QUE EXISTEM DENTRO  DE 'cleanNumbers'...











--> QUER DIZER QUE ESTE TEST:







///ISTO PODE SER CONSIDERADO 1 EXEMPLO DE INTEGRATION TEST (pq ''resultConstructor'' chama ''cleanNumbers'', que é uma function que POSSUI VÁRIAS FUNCTIONS NO SEU INTERIOR)
describe('cleanNumbers', () => {
  it('should return an array of numbers if an array of numbers in string format is provided as an argument', () => {
    // ARRANGE AND ACT
    const value = ['1', '2'];

    //ACT
    const result = cleanNumbers(value);

    // ASSERT
    expect(result).toEqual([1, 2]);
  });
});
















PODE SER CONSIDERADO 1 INTEGRATION TEST..



E 

INTEGRATION TESTS SÃO IMPORTANTES,


pq 


se temos código que funciona standalone,

nada 



indica que esse código vai funcionar todo vai funcionar em conjunto...










IMAGINE QUE VC ERRA A ORDEM 


DE EXECUÇÃO DAS FUNCTIONS,

OU ENTÃO SE VC 

COLOCA OS PARÂMETROS ERRADOS EM CADA FUNCTION... --> bem,

aí 



SUA FUNCTION VAI FALHAR.... as individual functions NÃO FALHARÃO,

MAS 


A FUNCTION INTEIRA,


A FUNCTION QUE TESTA A INTEGRATION DE

MÚLTIPLAS FUNCTIONS EM 1 ÚNICA FUNCTION,

ELA FALHARÁ...







--> ISSO PQ _ TESTAR FUNCTIONS DE FORMA STANDALONE ÀS VEZES NÃO BASTA...








OK, MAS ESSE É O VALOR DE INTEGRATION TESTS,
 NO FINAL DAS CONTAS...